//BLYNK V5 ile 1 ile 10 arasındaki değerler ile motor kontrolu saglıyorum V6 dur. V7 ise motor hız kontrolu.

#define BLYNK_TEMPLATE_ID "xxx"
#define BLYNK_TEMPLATE_NAME "xxx"
#define BLYNK_AUTH_TOKEN "xxxx"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <EEPROM.h>
#include <ArduinoOTA.h>  // OTA için gerekli kütüphane

// Pin tanımlamaları
#define DIR_PIN 25
#define STEP_PIN 33
#define EN_PIN 32
#define VREF_PIN 12

const char* ssid = "xxxxx";
const char* password = "xxxxx";

// Motor kontrol değişkenleri
#define STEPS_PER_TURN 15000 // 1 tur için gereken adım sayısı (NEMA 17 için genellikle 200)

int lastPosition = 0;  // Son konum, başlangıç konumu (tur sayısı)
float vrefValue = 0;   // Varsayılan VREF değeri (mA cinsinden)
int motorSpeed = 440;  // Varsayılan hız (mikrosaniye)
bool firstMove = true; // İlk hareket kontrolü

void setup() {
    Serial.begin(115200);
    
    pinMode(DIR_PIN, OUTPUT);
    pinMode(STEP_PIN, OUTPUT);
    pinMode(EN_PIN, OUTPUT);
    pinMode(VREF_PIN, OUTPUT);

    // EEPROM başlatma
    EEPROM.begin(512);
    lastPosition = EEPROM.read(0);  // Son konumu EEPROM'dan oku
    if (lastPosition < 0 || lastPosition > 10) {
        lastPosition = 0;  // Geçerli bir konum değilse sıfırlıyoruz
    }

    connectToWiFi();
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
    digitalWrite(EN_PIN, LOW);  // Motoru etkinleştir (LOW: etkin, HIGH: devre dışı)
    setVREF(vrefValue);

    // OTA ayarları
    ArduinoOTA.setHostname("ESP32-OTA");  // Cihaz adı
    ArduinoOTA.begin();                   // OTA'yı başlat
}

void loop() {
    if (WiFi.status() != WL_CONNECTED) {
        connectToWiFi();  // Bağlantı koptuysa tekrar bağlan
    }

    Blynk.run();
    ArduinoOTA.handle();  // OTA işlemleri için sürekli kontrol
}

void connectToWiFi() {
    WiFi.begin(ssid, password);
    Serial.println("WiFi'ye bağlanılıyor...");
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nWiFi bağlantısı başarılı!");
}

// Motoru belirli bir tur sayısına göre hareket ettir
void moveMotor(int targetValue) {
    // Motorun sınırlarını kontrol et (1 ile 10 arasında kalacak şekilde)
    if (targetValue < 1) {
        targetValue = 1;  // Alt sınır: Tam açık
    } else if (targetValue > 10) {
        targetValue = 10;  // Üst sınır: Tam kapalı
    }

    int stepsToMove = (targetValue - lastPosition) * STEPS_PER_TURN;  // Hedef pozisyona göre adım sayısını hesapla
    lastPosition = targetValue;  // Son konumu güncelle

    EEPROM.write(0, lastPosition);  // Son konumu EEPROM'a kaydet
    EEPROM.commit();  // EEPROM değişikliklerini kaydet

    // Motorun yönünü ayarla
    if (stepsToMove > 0) {
        digitalWrite(DIR_PIN, LOW);  // Saat yönünde
    } else {
        digitalWrite(DIR_PIN, HIGH);  // Saatt yönünün tersinde
        stepsToMove = -stepsToMove;  // Adım sayısını pozitif hale getir
    }

    // Motoru adım at
    for (int i = 0; i < stepsToMove; i++) {
        stepMotor();  // Motoru adım at
    }
}

// Motor adım fonksiyonu
void stepMotor() {
    digitalWrite(STEP_PIN, HIGH);
    delayMicroseconds(motorSpeed);  // Adım için belirlenen hızda bekleme
    digitalWrite(STEP_PIN, LOW);
    delayMicroseconds(motorSpeed);  // Bir adımın süresi
}

// VREF ayar fonksiyonu
void setVREF(float value) {
    int vref = map(value * 10, 3, 20, 0, 255);  // 0.3V - 2V aralığını 0-255 aralığına dönüştür
    analogWrite(VREF_PIN, vref);
}

// Blynk buton kontrol fonksiyonları
BLYNK_WRITE(V5) {
    int targetValue = param.asInt();  // Slider'dan gelen değer
    if (digitalRead(EN_PIN) == LOW) {  // Eğer motor aktifse
        if (targetValue != lastPosition) {
            moveMotor(targetValue);  // Motoru yeni hedefe hareket ettir
        }
    } else {  // Motor devre dışıysa
        Blynk.virtualWrite(V5, lastPosition);  // Slider'ı motorun son konumuna ayarla
    }
}

BLYNK_WRITE(V6) {
    bool enableMotor = param.asInt();  // V6 butonuna göre motoru etkinleştir/devre dışı bırak
    digitalWrite(EN_PIN, !enableMotor);  // LOW: motoru etkinleştir, HIGH: motoru devre dışı bırak
}

BLYNK_WRITE(V7) {
    motorSpeed = map(param.asInt(), 0, 999, 1, 2000);  // 1-2000 mikro saniye arasında ayarla
}

BLYNK_WRITE(V8) {
    float sliderValue = param.asFloat();  // Slider değeri 30-200 aralığında
    vrefValue = map(sliderValue, 30, 200, 3, 20) / 10.0;  // 0.3V ile 2V arasına dönüştür
    setVREF(vrefValue);  // VREF'i ayarla
}
